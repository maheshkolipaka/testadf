{
	"name": "PL_DMVMT_ADLS_To_ADLS_FileCopy_Generic",
	"properties": {
		"description": "Generic pipeline that will create a binary (replica) of file from on premise File Store to ADLS. Deletes file at source after generating copy.",
		"activities": [
			{
				"name": "ACT_FILTER_FilesOnly",
				"description": "Filter for types that are files only",
				"type": "Filter",
				"dependsOn": [
					{
						"activity": "ACT_SWITCH_DestinationDirectory",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "ACT_GET_FILE_META",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('ACT_GET_FILE_META').output.childItems",
						"type": "Expression"
					},
					"condition": {
						"value": "@equals(item().type, 'File')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "ACT_SWITCH_LoadType",
				"description": "Identify what pattern we are looking for when identifying files to move from source to destination",
				"type": "Switch",
				"dependsOn": [
					{
						"activity": "ACT_SETVAR_FilePatternLoadType",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"on": {
						"value": "@variables('FilePatternLoadType')",
						"type": "Expression"
					},
					"cases": [
						{
							"value": "START_WITH",
							"activities": [
								{
									"name": "ACT_FILTER_StartsWith",
									"description": "Filter for LOAD_TYPE = STARTS_WITH and look for files that fit pattern",
									"type": "Filter",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('ACT_FILTER_FilesOnly').output.Value",
											"type": "Expression"
										},
										"condition": {
											"value": "@startswith(toUpper(item().name),toUpper(pipeline().parameters.Data_Source_File_Pattern))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ACT_SETVAR_FileList_StartWith",
									"description": "Set variable FileList after being filtered",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ACT_FILTER_StartsWith",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileList",
										"value": {
											"value": "@activity('ACT_FILTER_StartsWith').output.Value",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"value": "END_WITH",
							"activities": [
								{
									"name": "ACT_FILTER_EndsWith",
									"description": "Filter for LOAD_TYPE = ENDS_WITH and look for files that fit pattern",
									"type": "Filter",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('ACT_FILTER_FilesOnly').output.Value",
											"type": "Expression"
										},
										"condition": {
											"value": "@endswith(toUpper(item().name),toUpper(pipeline().parameters.Data_Source_File_Pattern))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ACT_SETVAR_FileList_EndWith",
									"description": "Set variable FileList after being filtered",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ACT_FILTER_EndsWith",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileList",
										"value": {
											"value": "@activity('ACT_FILTER_EndsWith').output.Value",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"value": "LOOK_FOR",
							"activities": [
								{
									"name": "ACT_FILTER_LookFor",
									"description": "Filter for LOAD_TYPE = LOOK_FOR and look for files that fit pattern",
									"type": "Filter",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('ACT_FILTER_FilesOnly').output.Value",
											"type": "Expression"
										},
										"condition": {
											"value": "@contains(item().name,pipeline().parameters.Data_Source_File_Pattern)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ACT_SETVAR_FileList_LookFor",
									"description": "Set variable FileList after being filtered",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ACT_FILTER_LookFor",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileList",
										"value": {
											"value": "@activity('ACT_FILTER_LookFor').output.Value",
											"type": "Expression"
										}
									}
								}
							]
						}
					],
					"defaultActivities": [
						{
							"name": "ACT_SETVAR_FileList_All",
							"description": "Set variable FileList after being filtered",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "FileList",
								"value": {
									"value": "@activity('ACT_FILTER_FilesOnly').output.Value",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "ACT_SETVAR_FilePatternLoadType",
				"description": "Set the file load type",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "ACT_FILTER_FilesOnly",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "FilePatternLoadType",
					"value": {
						"value": "@if(or(empty(pipeline().parameters.Load_Type),equals(pipeline().parameters.Load_Type,'ALL')),'Default',pipeline().parameters.Load_Type)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "ACT_FOR_CopyFiles",
				"description": "For each file, copy to destination and delete at source after",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "ACT_SWITCH_LoadType",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@variables('FileList')",
						"type": "Expression"
					},
					"isSequential": false,
					"activities": [
						{
							"name": "ACT_Binary_Copy",
							"description": "Binary copy (as-is) of files from source to destination",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "BinarySource",
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": false,
										"deleteFilesAfterCompletion": true
									},
									"formatSettings": {
										"type": "BinaryReadSettings"
									}
								},
								"sink": {
									"type": "BinarySink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "DS_File_ADLS_Staging_Binary",
									"type": "DatasetReference",
									"parameters": {
										"Container": "@pipeline().parameters.Data_Source_Container",
										"Directory": "@pipeline().parameters.Data_Source_Directory",
										"Filename": "@item().name"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "DS_File_ADLS_Staging_Binary",
									"type": "DatasetReference",
									"parameters": {
										"Container": "@pipeline().parameters.Data_Destination_Container",
										"Directory": "@variables('DestinationPath')",
										"Filename": "@item().name"
									}
								}
							]
						}
					]
				}
			},
			{
				"name": "ACT_SWITCH_DestinationDirectory",
				"description": "Switch in order to set ADLS destination directory based on parameters",
				"type": "Switch",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"on": {
						"value": "@if(empty(pipeline().parameters.Data_Destination_Directory_Date_Partitioning),'',pipeline().parameters.Data_Destination_Directory_Date_Partitioning)",
						"type": "Expression"
					},
					"cases": [
						{
							"value": "YYYY",
							"activities": [
								{
									"name": "ACT_GEN_SETVAR_DestinationPath_YYYY",
									"description": "Setting DestinationPath Variable for ADLS when YYYY Directory Date Partition Identified",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "DestinationPath",
										"value": {
											"value": "@concat(pipeline().parameters.System_Source_Internal_External,'/',pipeline().parameters.Data_Destination_Directory,'/',formatDateTime(utcnow(), 'yyyy'))",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"value": "YYYYMM",
							"activities": [
								{
									"name": "ACT_GEN_SETVAR_DestinationPath_YYYYDD",
									"description": "Setting DestinationPath Variable for ADLS when YYYYMM Directory Date Partition Identified",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "DestinationPath",
										"value": {
											"value": "@concat(pipeline().parameters.System_Source_Internal_External,'/',pipeline().parameters.Data_Destination_Directory,'/',formatDateTime(utcnow(), 'yyyy/MM'))",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"value": "YYYYMMDD",
							"activities": [
								{
									"name": "ACT_GEN_SETVAR_DestinationPath_YYYYMMDD",
									"description": "Setting DestinationPath Variable for ADLS when YYYYMMDD Directory Date Partition Identified",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "DestinationPath",
										"value": {
											"value": "@concat(pipeline().parameters.System_Source_Internal_External,'/',pipeline().parameters.Data_Destination_Directory,'/',formatDateTime(utcnow(), 'yyyy/MM/dd'))\n",
											"type": "Expression"
										}
									}
								}
							]
						}
					],
					"defaultActivities": [
						{
							"name": "ACT_GEN_SETVAR_DestinationPath",
							"description": "Setting DestinationPath Variable for ADLS when no Directory Date Partitioning defined",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "DestinationPath",
								"value": {
									"value": "@concat(pipeline().parameters.System_Source_Internal_External,'/',pipeline().parameters.Data_Destination_Directory)",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "ACT_GET_FILE_META",
				"description": "Get Metadata to files at source",
				"type": "GetMetadata",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "DS_File_ADLS_Staging_Dir",
						"type": "DatasetReference",
						"parameters": {
							"Container": "@pipeline().parameters.Data_Source_Container",
							"Directory": "@pipeline().parameters.Data_Source_Directory"
						}
					},
					"fieldList": [
						"itemName",
						"itemType",
						"childItems"
					],
					"storeSettings": {
						"type": "AzureBlobFSReadSettings",
						"recursive": true
					},
					"formatSettings": {
						"type": "DelimitedTextReadSettings"
					}
				}
			}
		],
		"parameters": {
			"Data_Destination_Container": {
				"type": "String",
				"defaultValue": "rawzone"
			},
			"Data_Destination_Directory": {
				"type": "String",
				"defaultValue": "unprocessed/mobile"
			},
			"System_Source_Internal_External": {
				"type": "string"
			},
			"Load_Type": {
				"type": "string"
			},
			"Data_Source_Directory": {
				"type": "string",
				"defaultValue": "mobile"
			},
			"Data_Source_File_Pattern": {
				"type": "string",
				"defaultValue": "expt_mobl_dvc_smpp_dtl"
			},
			"Data_Destination_Directory_Date_Partitioning": {
				"type": "string"
			},
			"Source_Type": {
				"type": "string",
				"defaultValue": "ONPREM"
			},
			"Data_Source_Container": {
				"type": "string",
				"defaultValue": "staging"
			},
			"Data_Source_FileType": {
				"type": "string"
			}
		},
		"variables": {
			"DestinationPath": {
				"type": "String"
			},
			"FileList": {
				"type": "Array"
			},
			"FilePatternLoadType": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Generic"
		},
		"annotations": [],
		"lastPublishTime": "2022-05-05T19:06:13Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}