{
	"name": "PL_DMVMT_SQL_OnPrem_To_ADLS",
	"properties": {
		"description": "Copy data from On Prem SQL Server using Windows Authentication to Azure Data Lake",
		"activities": [
			{
				"name": "ACT_GEN_LKP_ObjectId",
				"description": "Lookup OBJECT_ID for pipeline from [AZUREDF].[PIPELINE_CONFIGURATION]",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "SELECT OBJECT_ID \nFROM AZUREDF.PIPELINE_CONFIGURATION \nWHERE PROJECT_NAME = '@{pipeline().parameters.Project_Name}'\nAND SOLUTION_NAME = '@{pipeline().parameters.Solution_Name}'\nAND DATA_SOURCE_OBJECT_NAME = '@{pipeline().parameters.Data_Source_Object_Name}'\nAND IS_ACTIVE = 1",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_ASQL_CONFIGURATION_Query",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "ACT_GEN_SETVAR_ObjectId",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "ACT_GEN_LKP_ObjectId",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "ObjectId",
					"value": {
						"value": "@string(activity('ACT_GEN_LKP_ObjectId').output.firstRow.OBJECT_ID)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "ACT_GEN_LKP_StartAndCutOffWatermark",
				"description": "Retrieve the last high-watermark value stored in external control table",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "ACT_GEN_SETVAR_ObjectId",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "AZUREDF.usp_Pipeline_Get_DataSource_StartWaterMark",
						"storedProcedureParameters": {
							"ObjectId": {
								"type": "Int32",
								"value": {
									"value": "@variables('ObjectId')",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_ASQL_CONFIGURATION_Query",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "ACT_GEN_LKP_ColumnMappings",
				"description": "Lookup column mappings from config tables ",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "ACT_GEN_SETVAR_ObjectId",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "AZUREDF.usp_Pipeline_Get_DataSource_Columns",
						"storedProcedureParameters": {
							"ObjectId": {
								"type": "Int32",
								"value": {
									"value": "@variables('ObjectId')",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_ASQL_CONFIGURATION_Query",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "ACT_GEN_LKP_DataSourceTableWaterMark",
				"description": "Retrieve  the current maximum value in watermark column of source data store",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "ACT_GEN_SETVAR_ObjectId",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlServerSource",
						"sqlReaderQuery": {
							"value": "SELECT MAX(@{pipeline().parameters.Data_Source_WaterMarkColumn}) as NewWatermarkValue\nfrom @{pipeline().parameters.Data_Source_Table_Name}",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_SQL_Generic_Query",
						"type": "DatasetReference",
						"parameters": {
							"SQLServerInstance": {
								"value": "@pipeline().parameters.Data_Source_Instance",
								"type": "Expression"
							},
							"DatabaseName": {
								"value": "@pipeline().parameters.Data_Source_Database",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "ACT_GEN_SETVAR_FilePath",
				"description": "Set file path for the target data file based on the structure internal/{source}/{project}/{yyyy/mm/dd}/ where the date is the current date",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "FilePath",
					"value": {
						"value": "@concat(pipeline().parameters.Data_Destination_Directory,'/',formatDateTime(utcnow(), 'yyyy/MM/dd'))",
						"type": "Expression"
					}
				}
			},
			{
				"name": "ACT_GEN_SETVAR_FileNameFull",
				"description": "Set name of target file with Data_Destination_Filename parameter as a prefix, then the max_watermark to differentiate the file, then \".parquet' as that will be the type of file loaded",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "ACT_GEN_LKP_StartAndCutOffWatermark",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "ACT_GEN_LKP_ColumnMappings",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "ACT_GEN_LKP_DataSourceTableWaterMark",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "FileNameFull",
					"value": {
						"value": "@{pipeline().parameters.Data_Destination_Filename}_@{replace(replace(replace(string(if(empty(activity('ACT_GEN_LKP_StartAndCutOffWatermark').output.firstRow.CutOffWatermarkValue),activity('ACT_GEN_LKP_DataSourceTableWaterMark').output.firstRow.NewWatermarkValue,activity('ACT_GEN_LKP_StartAndCutOffWatermark').output.firstRow.CutOffWatermarkValue)),'-',''),':',''),' ','_')}.parquet",
						"type": "Expression"
					}
				}
			},
			{
				"name": "ACT_MT_Copy_SQL_To_ADLS",
				"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "ACT_GEN_SETVAR_FileNameFull",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "ACT_GEN_SETVAR_FilePath",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlServerSource",
						"sqlReaderQuery": {
							"value": "select * from @{pipeline().parameters.Data_Source_Table_Name} with (nolock) where @{pipeline().parameters.Data_Source_WaterMarkColumn} > '@{activity('ACT_GEN_LKP_StartAndCutOffWatermark').output.firstRow.WatermarkValue}' and @{pipeline().parameters.Data_Source_WaterMarkColumn} <= @{concat('''',if(empty(activity('ACT_GEN_LKP_StartAndCutOffWatermark').output.firstRow.CutOffWatermarkValue),activity('ACT_GEN_LKP_DataSourceTableWaterMark').output.firstRow.NewWatermarkValue,activity('ACT_GEN_LKP_StartAndCutOffWatermark').output.firstRow.CutOffWatermarkValue),'''')} and @{pipeline().parameters.Data_Source_Additional_Conditions}",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"sink": {
						"type": "ParquetSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						}
					},
					"enableStaging": false,
					"translator": {
						"value": "@json(activity('ACT_GEN_LKP_ColumnMappings').output.firstRow.JSON_COLUMNS)",
						"type": "Expression"
					}
				},
				"inputs": [
					{
						"referenceName": "DS_SQL_Generic_Query",
						"type": "DatasetReference",
						"parameters": {
							"SQLServerInstance": {
								"value": "@pipeline().parameters.Data_Source_Instance",
								"type": "Expression"
							},
							"DatabaseName": {
								"value": "@pipeline().parameters.Data_Source_Database",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "DS_ADLS_Generic_File",
						"type": "DatasetReference",
						"parameters": {
							"Container": {
								"value": "@pipeline().parameters.Data_Destination_Zone_Container",
								"type": "Expression"
							},
							"Directory": {
								"value": "@variables('FilePath')",
								"type": "Expression"
							},
							"File": {
								"value": "@variables('FileNameFull')",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "ACT_GEN_SPRC_UpdateWaterMark",
				"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "ACT_GEN_EPIPE_PL_GEN_ADLS_MetadataFile",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "AZUREDF.usp_Pipeline_ControlTable_Update_WaterMark",
					"storedProcedureParameters": {
						"LastModifiedtime": {
							"value": {
								"value": "@activity('ACT_GEN_LKP_DataSourceTableWaterMark').output.firstRow.NewWatermarkValue",
								"type": "Expression"
							},
							"type": "String"
						},
						"LoadType": {
							"value": {
								"value": "@pipeline().parameters.Load_Type",
								"type": "Expression"
							},
							"type": "String"
						},
						"ManualCutOffIdentified": {
							"value": {
								"value": "@activity('ACT_GEN_LKP_StartAndCutOffWatermark').output.firstRow.ManualCutOffIdentified",
								"type": "Expression"
							},
							"type": "String"
						},
						"ObjectId": {
							"value": {
								"value": "@variables('ObjectId')",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"PipelineRunId": {
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "Genericsp",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "ACT_GEN_META_TargetFile",
				"description": "Get metadata information on the file just created",
				"type": "GetMetadata",
				"dependsOn": [
					{
						"activity": "ACT_MT_Copy_SQL_To_ADLS",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "DS_ADLS_Generic_File",
						"type": "DatasetReference",
						"parameters": {
							"Container": {
								"value": "@pipeline().parameters.Data_Destination_Zone_Container",
								"type": "Expression"
							},
							"Directory": {
								"value": "@variables('FilePath')",
								"type": "Expression"
							},
							"File": {
								"value": "@variables('FileNameFull')",
								"type": "Expression"
							}
						}
					},
					"fieldList": [
						"itemName",
						"itemType",
						"lastModified",
						"size",
						"structure",
						"columnCount",
						"exists"
					],
					"storeSettings": {
						"type": "AzureBlobFSReadSettings",
						"recursive": true
					}
				}
			},
			{
				"name": "ACT_GEN_EPIPE_PL_GEN_ADLS_MetadataFile",
				"description": "Invoke pipeline to create metadata file in the internal/{source}/{project}/metadata folder in json format",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "ACT_GEN_META_TargetFile",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "PL_GEN_ADLS_MetadataFile",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"Metadata": {
							"value": "With meta as (Select \n'@{pipeline().DataFactory}' as DataFactory_Name,\n'@{pipeline().Pipeline}' as Pipeline_Name,\n'@{pipeline().RunId}' as RunId,\n'@{variables('FilePath')}' as ItemPath,\n'@{string(activity('ACT_GEN_META_TargetFile').output.itemName)}' as ItemName,\n'@{activity('ACT_GEN_META_TargetFile').output.itemType}' as ItemType,\n'@{concat(variables('FilePath'),'/',string(activity('ACT_GEN_META_TargetFile').output.itemName))}' as ItemNameFullPath,\n'@{activity('ACT_GEN_META_TargetFile').output.lastModified}' as LastModified,\n'@{activity('ACT_GEN_META_TargetFile').output.size}' as FileSize,\n'@{activity('ACT_GEN_LKP_ColumnMappings').output.firstRow.FILE_SCHEMA}'  as [Schema],\n'@{activity('ACT_GEN_META_TargetFile').output.columnCount}' as ColumnCount,\n'@{activity('ACT_MT_Copy_SQL_To_ADLS').output.rowsCopied}' as [RowCount],\n'@{activity('ACT_MT_Copy_SQL_To_ADLS').output.effectiveIntegrationRuntime}' as IntegrationRuntime,\n'@{activity('ACT_MT_Copy_SQL_To_ADLS').output.executionDetails[0].source.type}' as Source_Type,\n'@{activity('ACT_MT_Copy_SQL_To_ADLS').output.executionDetails[0].sink.type}' as Sink_Type,\n'@{activity('ACT_MT_Copy_SQL_To_ADLS').output.executionDetails[0].status}' as Execution_Status,\n'@{pipeline().parameters.Data_Source_Table_Name}' as 'PipelineParameters.Data_Source_Table_Name',\n'@{pipeline().parameters.Data_Source_WaterMarkColumn}' as 'PipelineParameters.Data_Source_WaterMarkColumn',\n'@{pipeline().parameters.Data_Source_Instance}' as 'PipelineParameters.Data_Source_Instance',\n'@{pipeline().parameters.Data_Source_Database}' as 'PipelineParameters.Data_Source_Database',\n'@{pipeline().parameters.Data_Destination_Zone_Container}' as 'PipelineParameters.Data_Destination_Zone_Container',\n'@{pipeline().parameters.Data_Destination_Directory}' as 'PipelineParameters.Data_Destination_Directory',\n'@{pipeline().parameters.Project_Name}' as 'PipelineParameters.Project_Name',\n'@{pipeline().parameters.Solution_Name}' as 'PipelineParameters.Solution_Name',\n'@{pipeline().parameters.Data_Source_Object_Name}' as 'PipelineParameters.Data_Source_Object_Name',\n'@{pipeline().parameters.Data_Destination_Filename}' as 'PipelineParameters.Data_Destination_Filename',\n'@{pipeline().parameters.Storage_Account_Name}' as 'PipelineParameters.Storage_Account_Name'\n) Select m.*, Attribute.SourceSystem as 'Attribute.SourceSystem', Attribute.PII as 'Attribute.PII', Attribute.Tags as 'Attribute.Tags' from meta m\nCROSS JOIN (select [SourceSystem], [PII], [Tags] from (Select JSON_QUERY(REPLACE('@{json(string(pipeline().parameters.attributes))}',char(92),''),'$') attribute) q Cross Apply OpenJson(q.attribute) With ([SourceSystem] varchar(200) '$.SourceSystem',[PII] bit '$.PII',[Tags]  varchar(200) '$.Tags')) as Attribute",
							"type": "Expression"
						},
						"StorageAccount": {
							"value": "@pipeline().parameters.Storage_Account_Name",
							"type": "Expression"
						},
						"Directory": {
							"value": "@concat(pipeline().parameters.Data_Destination_Directory,'/metadata')",
							"type": "Expression"
						},
						"FileName": {
							"value": "@concat(activity('ACT_GEN_META_TargetFile').output.itemName,'.json')",
							"type": "Expression"
						},
						"Container": {
							"value": "@pipeline().parameters.Data_Destination_Zone_Container",
							"type": "Expression"
						}
					}
				}
			}
		],
		"parameters": {
			"Project_Name": {
				"type": "string"
			},
			"Solution_Name": {
				"type": "string"
			},
			"Data_Source_Object_Name": {
				"type": "string"
			},
			"Data_Source_Instance": {
				"type": "string"
			},
			"Data_Source_Database": {
				"type": "string"
			},
			"Data_Source_WaterMarkColumn": {
				"type": "string"
			},
			"Data_Source_Table_Name": {
				"type": "string"
			},
			"Data_Destination_Zone_Container": {
				"type": "string"
			},
			"Data_Destination_Directory": {
				"type": "string"
			},
			"Data_Destination_Filename": {
				"type": "string"
			},
			"Storage_Account_Name": {
				"type": "string"
			},
			"Data_Source_Additional_Conditions": {
				"type": "string"
			},
			"Load_Type": {
				"type": "string"
			},
			"Attributes": {
				"type": "string"
			}
		},
		"variables": {
			"ObjectId": {
				"type": "String"
			},
			"FileNameFull": {
				"type": "String"
			},
			"FilePath": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Generic"
		},
		"annotations": [],
		"lastPublishTime": "2022-07-12T06:18:21Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}