{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfedwfitsandbox1"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/P5B_DASTKTAD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute SSIS package1",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "\\\\sadwfitpoc1.file.core.windows.net\\packagedeploymentssis\\sqlserver\\ssis\\development\\BI\\SSIS\\DW_ASSURTRACK\\AssurTrack_AuditDetail.dtsx",
								"type": "File",
								"typeProperties": {
									"accessCredential": {
										"domain": "Azure",
										"userName": "sadwfitpoc1",
										"password": {
											"type": "SecureString",
											"value": "**********"
										}
									},
									"configurationPath": "\\\\sadwfitpoc1.file.core.windows.net\\packagedeploymentssis\\sqlserver\\ssis\\development\\BI\\Configuration\\DW_ASSURTRACK\\ASSURTRACK.dtsConfig"
								}
							},
							"connectVia": {
								"referenceName": "SSISIR-customtest",
								"type": "IntegrationRuntimeReference"
							},
							"projectConnectionManagers": {},
							"packageConnectionManagers": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-12T05:40:17Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/P5B_DSPRST')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "P5B_DSPRST",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "\\\\sadwfitpoc1.file.core.windows.net\\packagedeploymentssis\\sqlserver\\ssis\\development\\BI\\SSIS\\DW_CLAIMS\\Claims_SubProducer_Staging.dtsx",
								"type": "File",
								"typeProperties": {
									"accessCredential": {
										"domain": "Azure",
										"userName": "sadwfitpoc1",
										"password": {
											"type": "SecureString",
											"value": "**********"
										}
									},
									"configurationPath": "\\\\sadwfitpoc1.file.core.windows.net\\packagedeploymentssis\\sqlserver\\ssis\\development\\BI\\Configuration\\DW_CLAIMS\\c_ClaimsOleDbWin.dtsConfig"
								}
							},
							"connectVia": {
								"referenceName": "SSISIR-customtest",
								"type": "IntegrationRuntimeReference"
							},
							"loggingLevel": "Basic",
							"projectConnectionManagers": {},
							"packageConnectionManagers": {},
							"logLocation": {
								"logPath": "\\\\sadwfitpoc1.file.core.windows.net\\packagedeploymentssis\\sqlserver\\ssis\\development\\BI\\SSIS\\DW_CLAIMS",
								"type": "File",
								"typeProperties": {
									"accessCredential": {
										"domain": "Azure",
										"userName": "sadwfitpoc1",
										"password": {
											"type": "SecureString",
											"value": "**********"
										}
									}
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-10T10:28:10Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/P5B_GH_SSIS_MISC_PAYEE004')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute SSIS package1",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "\\\\sadwfitpoc1.file.core.windows.net\\packagedeploymentssis\\sqlserver\\ssis\\development\\BI\\SSIS\\BI_GH_MISC\\EWAPayeePolicy.dtsx",
								"type": "File",
								"typeProperties": {
									"accessCredential": {
										"domain": "Azure",
										"userName": "sadwfitpoc1",
										"password": {
											"type": "SecureString",
											"value": "**********"
										}
									},
									"configurationPath": "\\\\sadwfitpoc1.file.core.windows.net\\packagedeploymentssis\\sqlserver\\ssis\\development\\BI\\Configuration\\BI_GH_MISC\\SSISConfig.dtsConfig"
								}
							},
							"connectVia": {
								"referenceName": "SSISIR-customtest",
								"type": "IntegrationRuntimeReference"
							},
							"projectConnectionManagers": {},
							"packageConnectionManagers": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-05T07:44:43Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/P5B_GH_SSIS_MISC_RSAUDIT004')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute SSIS package1",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "\\\\sadwfitpoc1.file.core.windows.net\\packagedeploymentssis\\sqlserver\\ssis\\development\\BI\\SSIS\\BI_GH_MISC\\LZRSExcel.dtsx",
								"type": "File",
								"typeProperties": {
									"accessCredential": {
										"domain": "Azure",
										"userName": "sadwfitpoc1",
										"password": {
											"type": "SecureString",
											"value": "**********"
										}
									},
									"configurationPath": "\\\\sadwfitpoc1.file.core.windows.net\\packagedeploymentssis\\sqlserver\\ssis\\development\\BI\\Configuration\\BI_GH_MISC\\SSISConfig.dtsConfig"
								}
							},
							"connectVia": {
								"referenceName": "SSISIR-customtest",
								"type": "IntegrationRuntimeReference"
							},
							"projectConnectionManagers": {},
							"packageConnectionManagers": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-06T06:09:41Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PAYEE001')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute SSIS package1",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "\\\\sadwfitpoc1.file.core.windows.net\\packagedeploymentssis\\P5BI.GH.D.SFL.ITEM.LANDING.MAIN\\P5BI.GH.D.SFL.COTITEMS\\SFLREF_ITEM_Payee.dtsx",
								"type": "File",
								"typeProperties": {
									"accessCredential": {
										"domain": "Azure",
										"userName": "sadwfitpoc1",
										"password": {
											"type": "SecureString",
											"value": "**********"
										}
									},
									"configurationPath": "\\\\sadwfitpoc1.file.core.windows.net\\packagedeploymentssis\\P5BI.GH.D.SFL.ITEM.LANDING.MAIN\\P5BI.GH.D.SFL.COTITEMS\\SSISConfig.dtsConfig"
								}
							},
							"connectVia": {
								"referenceName": "SSISIR-customtest",
								"type": "IntegrationRuntimeReference"
							},
							"projectConnectionManagers": {},
							"packageConnectionManagers": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-03-31T10:05:42Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PAYTECH_PSA_CLOSED_BATCH')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SSIS Package PAYTECH",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "\\\\sadwfitpoc1.file.core.windows.net\\packagedeploymentssis\\ASBI\\SSIS\\DW_GW\\PAYTECH_PSA_CLOSED_BATCH.dtsx",
								"type": "File",
								"typeProperties": {
									"packagePassword": {
										"type": "SecureString",
										"value": "**********"
									},
									"accessCredential": {
										"domain": "Azure",
										"userName": "sadwfitpoc1",
										"password": {
											"type": "SecureString",
											"value": "**********"
										}
									},
									"configurationPath": "\\\\sadwfitpoc1.file.core.windows.net\\packagedeploymentssis\\ASBI\\CONFIGURATION\\DW_GW\\PAYTECH.dtsConfig"
								}
							},
							"connectVia": {
								"referenceName": "SSISIR-customtest",
								"type": "IntegrationRuntimeReference"
							},
							"loggingLevel": "Verbose",
							"projectConnectionManagers": {},
							"packageConnectionManagers": {},
							"logLocation": {
								"logPath": "\\\\sadwfitpoc1.file.core.windows.net\\packagedeploymentssis\\InMomentSurveyResponse\\log\\",
								"type": "File",
								"typeProperties": {
									"accessCredential": {
										"domain": "Azure",
										"userName": "sadwfitpoc1",
										"password": {
											"type": "SecureString",
											"value": "**********"
										}
									}
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-27T01:02:38Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DMVMT_ADLS_To_ADLS_FileCopy_Generic')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Generic pipeline that will create a binary (replica) of file from on premise File Store to ADLS. Deletes file at source after generating copy.",
				"activities": [
					{
						"name": "ACT_FILTER_FilesOnly",
						"description": "Filter for types that are files only",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ACT_SWITCH_DestinationDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ACT_GET_FILE_META",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ACT_GET_FILE_META').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type, 'File')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ACT_SWITCH_LoadType",
						"description": "Identify what pattern we are looking for when identifying files to move from source to destination",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "ACT_SETVAR_FilePatternLoadType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@variables('FilePatternLoadType')",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "START_WITH",
									"activities": [
										{
											"name": "ACT_FILTER_StartsWith",
											"description": "Filter for LOAD_TYPE = STARTS_WITH and look for files that fit pattern",
											"type": "Filter",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"items": {
													"value": "@activity('ACT_FILTER_FilesOnly').output.Value",
													"type": "Expression"
												},
												"condition": {
													"value": "@startswith(toUpper(item().name),toUpper(pipeline().parameters.Data_Source_File_Pattern))",
													"type": "Expression"
												}
											}
										},
										{
											"name": "ACT_SETVAR_FileList_StartWith",
											"description": "Set variable FileList after being filtered",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "ACT_FILTER_StartsWith",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "FileList",
												"value": {
													"value": "@activity('ACT_FILTER_StartsWith').output.Value",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "END_WITH",
									"activities": [
										{
											"name": "ACT_FILTER_EndsWith",
											"description": "Filter for LOAD_TYPE = ENDS_WITH and look for files that fit pattern",
											"type": "Filter",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"items": {
													"value": "@activity('ACT_FILTER_FilesOnly').output.Value",
													"type": "Expression"
												},
												"condition": {
													"value": "@endswith(toUpper(item().name),toUpper(pipeline().parameters.Data_Source_File_Pattern))",
													"type": "Expression"
												}
											}
										},
										{
											"name": "ACT_SETVAR_FileList_EndWith",
											"description": "Set variable FileList after being filtered",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "ACT_FILTER_EndsWith",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "FileList",
												"value": {
													"value": "@activity('ACT_FILTER_EndsWith').output.Value",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "LOOK_FOR",
									"activities": [
										{
											"name": "ACT_FILTER_LookFor",
											"description": "Filter for LOAD_TYPE = LOOK_FOR and look for files that fit pattern",
											"type": "Filter",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"items": {
													"value": "@activity('ACT_FILTER_FilesOnly').output.Value",
													"type": "Expression"
												},
												"condition": {
													"value": "@contains(item().name,pipeline().parameters.Data_Source_File_Pattern)",
													"type": "Expression"
												}
											}
										},
										{
											"name": "ACT_SETVAR_FileList_LookFor",
											"description": "Set variable FileList after being filtered",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "ACT_FILTER_LookFor",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "FileList",
												"value": {
													"value": "@activity('ACT_FILTER_LookFor').output.Value",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "ACT_SETVAR_FileList_All",
									"description": "Set variable FileList after being filtered",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileList",
										"value": {
											"value": "@activity('ACT_FILTER_FilesOnly').output.Value",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "ACT_SETVAR_FilePatternLoadType",
						"description": "Set the file load type",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ACT_FILTER_FilesOnly",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "FilePatternLoadType",
							"value": {
								"value": "@if(or(empty(pipeline().parameters.Load_Type),equals(pipeline().parameters.Load_Type,'ALL')),'Default',pipeline().parameters.Load_Type)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ACT_FOR_CopyFiles",
						"description": "For each file, copy to destination and delete at source after",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ACT_SWITCH_LoadType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('FileList')",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "ACT_Binary_Copy",
									"description": "Binary copy (as-is) of files from source to destination",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"deleteFilesAfterCompletion": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_File_ADLS_Staging_Binary",
											"type": "DatasetReference",
											"parameters": {
												"Container": "@pipeline().parameters.Data_Source_Container",
												"Directory": "@pipeline().parameters.Data_Source_Directory",
												"Filename": "@item().name"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_File_ADLS_Staging_Binary",
											"type": "DatasetReference",
											"parameters": {
												"Container": "@pipeline().parameters.Data_Destination_Container",
												"Directory": "@variables('DestinationPath')",
												"Filename": "@item().name"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "ACT_SWITCH_DestinationDirectory",
						"description": "Switch in order to set ADLS destination directory based on parameters",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@if(empty(pipeline().parameters.Data_Destination_Directory_Date_Partitioning),'',pipeline().parameters.Data_Destination_Directory_Date_Partitioning)",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "YYYY",
									"activities": [
										{
											"name": "ACT_GEN_SETVAR_DestinationPath_YYYY",
											"description": "Setting DestinationPath Variable for ADLS when YYYY Directory Date Partition Identified",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "DestinationPath",
												"value": {
													"value": "@concat(pipeline().parameters.System_Source_Internal_External,'/',pipeline().parameters.Data_Destination_Directory,'/',formatDateTime(utcnow(), 'yyyy'))",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "YYYYMM",
									"activities": [
										{
											"name": "ACT_GEN_SETVAR_DestinationPath_YYYYDD",
											"description": "Setting DestinationPath Variable for ADLS when YYYYMM Directory Date Partition Identified",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "DestinationPath",
												"value": {
													"value": "@concat(pipeline().parameters.System_Source_Internal_External,'/',pipeline().parameters.Data_Destination_Directory,'/',formatDateTime(utcnow(), 'yyyy/MM'))",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "YYYYMMDD",
									"activities": [
										{
											"name": "ACT_GEN_SETVAR_DestinationPath_YYYYMMDD",
											"description": "Setting DestinationPath Variable for ADLS when YYYYMMDD Directory Date Partition Identified",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "DestinationPath",
												"value": {
													"value": "@concat(pipeline().parameters.System_Source_Internal_External,'/',pipeline().parameters.Data_Destination_Directory,'/',formatDateTime(utcnow(), 'yyyy/MM/dd'))\n",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "ACT_GEN_SETVAR_DestinationPath",
									"description": "Setting DestinationPath Variable for ADLS when no Directory Date Partitioning defined",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "DestinationPath",
										"value": {
											"value": "@concat(pipeline().parameters.System_Source_Internal_External,'/',pipeline().parameters.Data_Destination_Directory)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "ACT_GET_FILE_META",
						"description": "Get Metadata to files at source",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_File_ADLS_Staging_Dir",
								"type": "DatasetReference",
								"parameters": {
									"Container": "@pipeline().parameters.Data_Source_Container",
									"Directory": "@pipeline().parameters.Data_Source_Directory"
								}
							},
							"fieldList": [
								"itemName",
								"itemType",
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Data_Destination_Container": {
						"type": "String",
						"defaultValue": "rawzone"
					},
					"Data_Destination_Directory": {
						"type": "String",
						"defaultValue": "unprocessed/mobile"
					},
					"System_Source_Internal_External": {
						"type": "string"
					},
					"Load_Type": {
						"type": "string"
					},
					"Data_Source_Directory": {
						"type": "string",
						"defaultValue": "mobile"
					},
					"Data_Source_File_Pattern": {
						"type": "string",
						"defaultValue": "expt_mobl_dvc_smpp_dtl"
					},
					"Data_Destination_Directory_Date_Partitioning": {
						"type": "string"
					},
					"Source_Type": {
						"type": "string",
						"defaultValue": "ONPREM"
					},
					"Data_Source_Container": {
						"type": "string",
						"defaultValue": "staging"
					},
					"Data_Source_FileType": {
						"type": "string"
					}
				},
				"variables": {
					"DestinationPath": {
						"type": "String"
					},
					"FileList": {
						"type": "Array"
					},
					"FilePatternLoadType": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Generic"
				},
				"annotations": [],
				"lastPublishTime": "2022-05-05T19:06:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DMVMT_Gen_Outgoing_File_Copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACT_IF_Condition_Compress_Outgoing",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.IsCompressOutgoing,'1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "ACT_Binary_Copy_Outgoing_As_Is",
									"description": "Binary copy (as-is) of files from source to destination",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false,
										"parallelCopies": 4
									},
									"inputs": [
										{
											"referenceName": "DS_File_ADLS_Source",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.Outgoing_Container",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.Current_Directory",
													"type": "Expression"
												},
												"Filename": {
													"value": "@pipeline().parameters.Compress_FileName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_File_ADLS_Outgoing_Binary",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.Outgoing_Container",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.Outgoing_Directory",
													"type": "Expression"
												},
												"FileName": {
													"value": "@concat(pipeline().parameters.Compress_FileName, utcNow())",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "ACT_Binary_Copy_Outgoing_Compress",
									"description": "Binary copy and compress files from current to outgoing",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false,
										"parallelCopies": 4
									},
									"inputs": [
										{
											"referenceName": "DS_File_ADLS_Source",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.Outgoing_Container",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.Current_Directory",
													"type": "Expression"
												},
												"Filename": {
													"value": "@pipeline().parameters.Compress_FileName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_File_ADLS_Binary_Compress",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.Outgoing_Container",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.Outgoing_Directory",
													"type": "Expression"
												},
												"FileName": {
													"value": "@concat(pipeline().parameters.Compress_FileName,utcNow(), '.tar')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "ACT_IF_Condition_Compress_Archive",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ACT_IF_Condition_Compress_Outgoing",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.IsCompressArchive, '1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "ACT_Binary_Copy_Outgoing_As_Is_copy1",
									"description": "Binary copy (as-is) of files from source to destination",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false,
										"parallelCopies": 4
									},
									"inputs": [
										{
											"referenceName": "DS_File_ADLS_Source",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.Outgoing_Container",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.Current_Directory",
													"type": "Expression"
												},
												"Filename": {
													"value": "@pipeline().parameters.Compress_FileName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_File_ADLS_Outgoing_Binary",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.Outgoing_Container",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.Archive_Directory",
													"type": "Expression"
												},
												"FileName": {
													"value": "@concat(pipeline().parameters.Compress_FileName, utcNow())",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "ACT_Binary_Copy_Archive_Compress",
									"description": "Binary copy and compress files from current to archive",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false,
										"parallelCopies": 4
									},
									"inputs": [
										{
											"referenceName": "DS_File_ADLS_Source",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.Outgoing_Container",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.Current_Directory",
													"type": "Expression"
												},
												"Filename": {
													"value": "@pipeline().parameters.Compress_FileName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_File_ADLS_Binary_Compress",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.Outgoing_Container",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.Archive_Directory",
													"type": "Expression"
												},
												"FileName": {
													"value": "@concat(pipeline().parameters.Compress_FileName,'.tar')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Outgoing_Container": {
						"type": "string",
						"defaultValue": "outgoing-zone"
					},
					"Current_Directory": {
						"type": "string",
						"defaultValue": "current"
					},
					"Outgoing_Directory": {
						"type": "string",
						"defaultValue": "outgoing"
					},
					"Compress_FileName": {
						"type": "string",
						"defaultValue": "test"
					},
					"IsCompressOutgoing": {
						"type": "string",
						"defaultValue": "1"
					},
					"IsCompressArchive": {
						"type": "string",
						"defaultValue": "1"
					},
					"Archive_Directory": {
						"type": "string",
						"defaultValue": "archive"
					}
				},
				"folder": {
					"name": "Generic"
				},
				"annotations": [],
				"lastPublishTime": "2022-07-22T12:19:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DMVMT_Onprem_To_ADLS_Filecopy_Generic')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACT_FILTER_FilesOnly",
						"description": "Filter for types that are files only",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ACT_GET_FILE_META",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ACT_GET_FILE_META').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type, 'File')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ACT_SWITCH_LoadType",
						"description": "Identify what pattern we are looking for when identifying files to move from source to destination",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "ACT_SETVAR_FilePatternLoadType",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ACT_SETVAR_DesinationPath",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@variables('FilePatternLoadType')",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "START_WITH",
									"activities": [
										{
											"name": "ACT_FILTER_StartsWith",
											"description": "Filter for LOAD_TYPE = STARTS_WITH and look for files that fit pattern",
											"type": "Filter",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"items": {
													"value": "@activity('ACT_FILTER_FilesOnly').output.Value",
													"type": "Expression"
												},
												"condition": {
													"value": "@startswith(toUpper(item().name),toUpper(pipeline().parameters.Data_Source_File_Pattern))",
													"type": "Expression"
												}
											}
										},
										{
											"name": "ACT_SETVAR_FileList_StartWith",
											"description": "Set variable FileList after being filtered",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "ACT_FILTER_StartsWith",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "FileList",
												"value": {
													"value": "@activity('ACT_FILTER_StartsWith').output.Value",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "END_WITH",
									"activities": [
										{
											"name": "ACT_FILTER_EndsWith",
											"description": "Filter for LOAD_TYPE = ENDS_WITH and look for files that fit pattern",
											"type": "Filter",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"items": {
													"value": "@activity('ACT_FILTER_FilesOnly').output.Value",
													"type": "Expression"
												},
												"condition": {
													"value": "@endswith(toUpper(item().name),toUpper(pipeline().parameters.Data_Source_File_Pattern))",
													"type": "Expression"
												}
											}
										},
										{
											"name": "ACT_SETVAR_FileList_EndWith",
											"description": "Set variable FileList after being filtered",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "ACT_FILTER_EndsWith",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "FileList",
												"value": {
													"value": "@activity('ACT_FILTER_EndsWith').output.Value",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "LOOK_FOR",
									"activities": [
										{
											"name": "ACT_FILTER_LookFor",
											"description": "Filter for LOAD_TYPE = LOOK_FOR and look for files that fit pattern",
											"type": "Filter",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"items": {
													"value": "@activity('ACT_FILTER_FilesOnly').output.Value",
													"type": "Expression"
												},
												"condition": {
													"value": "@contains(item().name,pipeline().parameters.Data_Source_File_Pattern)",
													"type": "Expression"
												}
											}
										},
										{
											"name": "ACT_SETVAR_FileList_LookFor",
											"description": "Set variable FileList after being filtered",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "ACT_FILTER_LookFor",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "FileList",
												"value": {
													"value": "@activity('ACT_FILTER_LookFor').output.Value",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "ACT_SETVAR_FileList_All",
									"description": "Set variable FileList after being filtered",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileList",
										"value": {
											"value": "@activity('ACT_FILTER_FilesOnly').output.Value",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "ACT_SETVAR_FilePatternLoadType",
						"description": "Set the file load type",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ACT_FILTER_FilesOnly",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "FilePatternLoadType",
							"value": {
								"value": "@if(or(empty(pipeline().parameters.Load_Type),equals(pipeline().parameters.Load_Type,'ALL')),'Default',pipeline().parameters.Load_Type)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ACT_FOR_CopyFiles",
						"description": "For each file, copy to destination and delete at source after",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ACT_SWITCH_LoadType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('FileList')",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "ACT_Binary_Copy",
									"description": "Binary copy (as-is) of files from source to destination",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": false,
												"deleteFilesAfterCompletion": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_File_Share_Onprem_Binary",
											"type": "DatasetReference",
											"parameters": {
												"Directory": "@pipeline().parameters.Data_Source_Directory",
												"Filename": "@item().name"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_File_ADLS_Staging_Binary",
											"type": "DatasetReference",
											"parameters": {
												"Container": "@pipeline().parameters.Data_Destination_Container",
												"Directory": "@variables('DestinationPath')",
												"Filename": "@item().name"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "ACT_GET_FILE_META",
						"description": "Get Metadata to files at source",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_File_Share_OnPrem_Dir",
								"type": "DatasetReference",
								"parameters": {
									"Directory": "@pipeline().parameters.Data_Source_Directory"
								}
							},
							"fieldList": [
								"itemName",
								"itemType",
								"lastModified",
								"childItems"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ACT_SETVAR_DesinationPath",
						"description": "Set the file load type",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ACT_FILTER_FilesOnly",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "DestinationPath",
							"value": {
								"value": "@concat(pipeline().parameters.System_Source_Internal_External,'/',pipeline().parameters.Data_Destination_Directory)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Data_Destination_Container": {
						"type": "String",
						"defaultValue": "rawzone"
					},
					"Data_Destination_Directory": {
						"type": "String",
						"defaultValue": "mobile/processing"
					},
					"System_Source_Internal_External": {
						"type": "string"
					},
					"Load_Type": {
						"type": "string"
					},
					"Data_Source_Directory": {
						"type": "string"
					},
					"Data_Source_File_Pattern": {
						"type": "string",
						"defaultValue": "expt_mobl_dvc_smpp_dtl"
					},
					"Source_Type": {
						"type": "string",
						"defaultValue": "ONPREM"
					},
					"Data_Source_FileServer": {
						"type": "string"
					},
					"Data_Source_FileType": {
						"type": "string"
					}
				},
				"variables": {
					"DestinationPath": {
						"type": "String"
					},
					"FileList": {
						"type": "Array"
					},
					"FilePatternLoadType": {
						"type": "String"
					},
					"FilterList": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Generic"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-28T21:59:26Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DMVMT_Onprem_To_ADLS_Filecopy_Generic_cloned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACT_FILTER_FilesOnly",
						"description": "Filter for types that are files only",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ACT_GET_FILE_META",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ACT_GET_FILE_META').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type, 'File')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ACT_SWITCH_LoadType",
						"description": "Identify what pattern we are looking for when identifying files to move from source to destination",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "ACT_SETVAR_FilePatternLoadType",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ACT_SETVAR_DesinationPath",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@variables('FilePatternLoadType')",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "START_WITH",
									"activities": [
										{
											"name": "ACT_FILTER_StartsWith",
											"description": "Filter for LOAD_TYPE = STARTS_WITH and look for files that fit pattern",
											"type": "Filter",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"items": {
													"value": "@activity('ACT_FILTER_FilesOnly').output.Value",
													"type": "Expression"
												},
												"condition": {
													"value": "@startswith(toUpper(item().name),toUpper(pipeline().parameters.Data_Source_File_Pattern))",
													"type": "Expression"
												}
											}
										},
										{
											"name": "ACT_SETVAR_FileList_StartWith",
											"description": "Set variable FileList after being filtered",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "ACT_FILTER_StartsWith",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "FileList",
												"value": {
													"value": "@activity('ACT_FILTER_StartsWith').output.Value",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "END_WITH",
									"activities": [
										{
											"name": "ACT_FILTER_EndsWith",
											"description": "Filter for LOAD_TYPE = ENDS_WITH and look for files that fit pattern",
											"type": "Filter",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"items": {
													"value": "@activity('ACT_FILTER_FilesOnly').output.Value",
													"type": "Expression"
												},
												"condition": {
													"value": "@endswith(toUpper(item().name),toUpper(pipeline().parameters.Data_Source_File_Pattern))",
													"type": "Expression"
												}
											}
										},
										{
											"name": "ACT_SETVAR_FileList_EndWith",
											"description": "Set variable FileList after being filtered",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "ACT_FILTER_EndsWith",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "FileList",
												"value": {
													"value": "@activity('ACT_FILTER_EndsWith').output.Value",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "LOOK_FOR",
									"activities": [
										{
											"name": "ACT_FILTER_LookFor",
											"description": "Filter for LOAD_TYPE = LOOK_FOR and look for files that fit pattern",
											"type": "Filter",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"items": {
													"value": "@activity('ACT_FILTER_FilesOnly').output.Value",
													"type": "Expression"
												},
												"condition": {
													"value": "@contains(item().name,pipeline().parameters.Data_Source_File_Pattern)",
													"type": "Expression"
												}
											}
										},
										{
											"name": "ACT_SETVAR_FileList_LookFor",
											"description": "Set variable FileList after being filtered",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "ACT_FILTER_LookFor",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "FileList",
												"value": {
													"value": "@activity('ACT_FILTER_LookFor').output.Value",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "ACT_SETVAR_FileList_All",
									"description": "Set variable FileList after being filtered",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileList",
										"value": {
											"value": "@activity('ACT_FILTER_FilesOnly').output.Value",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "ACT_SETVAR_FilePatternLoadType",
						"description": "Set the file load type",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ACT_FILTER_FilesOnly",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "FilePatternLoadType",
							"value": {
								"value": "@if(or(empty(pipeline().parameters.Load_Type),equals(pipeline().parameters.Load_Type,'ALL')),'Default',pipeline().parameters.Load_Type)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ACT_FOR_CopyFiles",
						"description": "For each file, copy to destination and delete at source after",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ACT_SWITCH_LoadType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('FileList')",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "ACT_Binary_Copy",
									"description": "Binary copy (as-is) of files from source to destination",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": false,
												"deleteFilesAfterCompletion": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_File_Share_Onprem_Binary",
											"type": "DatasetReference",
											"parameters": {
												"Directory": "@pipeline().parameters.Data_Source_Directory",
												"Filename": "@item().name"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_File_ADLS_Staging_Binary",
											"type": "DatasetReference",
											"parameters": {
												"Container": "@pipeline().parameters.Data_Destination_Container",
												"Directory": "@variables('DestinationPath')",
												"Filename": "@item().name"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "ACT_GET_FILE_META",
						"description": "Get Metadata to files at source",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_File_Share_OnPrem_Dir",
								"type": "DatasetReference",
								"parameters": {
									"Directory": "@pipeline().parameters.Data_Source_Directory"
								}
							},
							"fieldList": [
								"itemName",
								"itemType",
								"lastModified",
								"childItems"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ACT_SETVAR_DesinationPath",
						"description": "Set the file load type",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ACT_FILTER_FilesOnly",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "DestinationPath",
							"value": {
								"value": "@concat(pipeline().parameters.System_Source_Internal_External,'/',pipeline().parameters.Data_Destination_Directory)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Data_Destination_Container": {
						"type": "String",
						"defaultValue": "rawzone"
					},
					"Data_Destination_Directory": {
						"type": "String",
						"defaultValue": "mobile/processing"
					},
					"System_Source_Internal_External": {
						"type": "string"
					},
					"Load_Type": {
						"type": "string"
					},
					"Data_Source_Directory": {
						"type": "string"
					},
					"Data_Source_File_Pattern": {
						"type": "string",
						"defaultValue": "expt_mobl_dvc_smpp_dtl"
					},
					"Source_Type": {
						"type": "string",
						"defaultValue": "ONPREM"
					},
					"Data_Source_FileServer": {
						"type": "string"
					},
					"Data_Source_FileType": {
						"type": "string"
					}
				},
				"variables": {
					"DestinationPath": {
						"type": "String"
					},
					"FileList": {
						"type": "Array"
					},
					"FilePatternLoadType": {
						"type": "String"
					},
					"FilterList": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Genericpipelines_Cloned"
				},
				"annotations": [],
				"lastPublishTime": "2022-07-06T10:29:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_GEN_ADLS_MetadataFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Creates a metadata file based on the query passed to this pipeline. ",
				"activities": [
					{
						"name": "ACT_MT_Copy_MetadataFile",
						"description": "Creates a JSON file with the metadata passed as a SQL query to this pipeline",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@pipeline().parameters.Metadata",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_ASQL_CONFIGURATION_Query",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_Generic_JSONFile",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.Container",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.Directory",
										"type": "Expression"
									},
									"File": {
										"value": "@replace(pipeline().parameters.FileName,'.parquet','')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Metadata": {
						"type": "string"
					},
					"StorageAccount": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"Container": {
						"type": "string",
						"defaultValue": "rawzone"
					}
				},
				"folder": {
					"name": "Generic"
				},
				"annotations": [],
				"lastPublishTime": "2022-07-12T06:18:21Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_GEN_ADLS_MetadataFile1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Creates a metadata file based on the query passed to this pipeline. ",
				"activities": [
					{
						"name": "ACT_MT_Copy_MetadataFile",
						"description": "Creates a JSON file with the metadata passed as a SQL query to this pipeline",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@pipeline().parameters.Metadata",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_ASQL_CONFIGURATION_Query1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_Generic_JSONFile1",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.Container",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.Directory",
										"type": "Expression"
									},
									"File": {
										"value": "@replace(pipeline().parameters.FileName,'.parquet','')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Metadata": {
						"type": "string"
					},
					"StorageAccount": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"Container": {
						"type": "string",
						"defaultValue": "rawzone"
					}
				},
				"folder": {
					"name": "Generic"
				},
				"annotations": [],
				"lastPublishTime": "2022-07-13T07:50:30Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_GEN_Execute_SSIS_Package')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACT_Execute_SSIS_Package",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Param1",
								"value": "Test"
							}
						],
						"typeProperties": {
							"packageLocation": {
								"packagePath": {
									"value": "@pipeline().parameters.Package_Path",
									"type": "Expression"
								},
								"type": "File",
								"typeProperties": {
									"accessCredential": {
										"domain": "Azure",
										"userName": "sadwfitpoc1",
										"password": {
											"type": "SecureString",
											"value": "**********"
										}
									},
									"configurationPath": {
										"value": "@pipeline().parameters.Configuration_Path",
										"type": "Expression"
									}
								}
							},
							"connectVia": {
								"referenceName": "SSISpackageazuredeployment",
								"type": "IntegrationRuntimeReference"
							},
							"projectConnectionManagers": {},
							"packageConnectionManagers": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Package_Path": {
						"type": "string"
					},
					"Configuration_Path": {
						"type": "string"
					},
					"Logging_Path": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Generic"
				},
				"annotations": [],
				"lastPublishTime": "2022-07-26T06:04:20Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/POC_ADLS2SYN_SSIS v2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SSIS Package",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "\\\\sadwfitpoc1.file.core.windows.net\\packagedeploymentssis\\Paytech_BlobToSynapse\\ADLS2Syanpse_POC_Blob.dtsx",
								"type": "File",
								"typeProperties": {
									"accessCredential": {
										"domain": "Azure",
										"userName": "sadwfitpoc1",
										"password": {
											"type": "SecureString",
											"value": "**********"
										}
									},
									"configurationPath": "\\\\sadwfitpoc1.file.core.windows.net\\packagedeploymentssis\\Paytech_BlobToSynapse\\POC_ADLS2Synapse.dtsConfig"
								}
							},
							"connectVia": {
								"referenceName": "SSISIR-customtest",
								"type": "IntegrationRuntimeReference"
							},
							"loggingLevel": "Basic",
							"projectConnectionManagers": {},
							"packageConnectionManagers": {},
							"logLocation": {
								"logPath": "\\\\sadwfitpoc1.file.core.windows.net\\packagedeploymentssis\\InMomentSurveyResponse\\log\\",
								"type": "File",
								"typeProperties": {
									"accessCredential": {
										"domain": "Azure",
										"userName": "sadwfitpoc1",
										"password": {
											"type": "SecureString",
											"value": "**********"
										}
									}
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-12T14:26:20Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/POC_ADLS2SYN_SSIS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SSIS Package",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "\\\\sadwfitpoc1.file.core.windows.net\\packagedeploymentssis\\InMomentSurveyResponse\\SSIS\\Package.dtsx",
								"type": "File",
								"typeProperties": {
									"packagePassword": {
										"type": "SecureString",
										"value": "**********"
									},
									"accessCredential": {
										"domain": "Azure",
										"userName": "sadwfitpoc1",
										"password": {
											"type": "SecureString",
											"value": "**********"
										}
									}
								}
							},
							"connectVia": {
								"referenceName": "SSISIR-customtest",
								"type": "IntegrationRuntimeReference"
							},
							"loggingLevel": "Basic",
							"projectConnectionManagers": {},
							"packageConnectionManagers": {},
							"logLocation": {
								"logPath": "\\\\sadwfitpoc1.file.core.windows.net\\packagedeploymentssis\\InMomentSurveyResponse\\log\\",
								"type": "File",
								"typeProperties": {
									"accessCredential": {
										"domain": "Azure",
										"userName": "sadwfitpoc1",
										"password": {
											"type": "SecureString",
											"value": "**********"
										}
									}
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-03-28T13:53:58Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PRPSAEWFMACDLOGINdtsx')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute SSIS package1",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "\\\\sadwfitpoc1.file.core.windows.net\\packagedeploymentssis\\BI_EPS\\EWFS\\PR_PSA_EWFM_ACD_LOGIN.dtsx",
								"type": "File",
								"typeProperties": {
									"accessCredential": {
										"domain": "Azure",
										"userName": "sadwfitpoc1",
										"password": {
											"type": "SecureString",
											"value": "**********"
										}
									},
									"configurationPath": "C:\\Users\\WC1574\\source\\repos\\EPS1\\EPS1\\EPS_EWFM_LOAD.dtsConfig"
								}
							},
							"connectVia": {
								"referenceName": "SSISIR-customtest",
								"type": "IntegrationRuntimeReference"
							},
							"projectConnectionManagers": {},
							"packageConnectionManagers": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-11T11:12:17Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PR_Data_Audit_1Attribute')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PR_Data_Audit_1Attribute",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "\\\\sadwfitpoc1.file.core.windows.net\\packagedeploymentssis\\BI_DATA_AUDIT\\P5BI.D.CAS.PROFILING.AUDIT\\P5BI.DCASPFLDOETL\\PR_Data_Audit_1Attribute\\PR_Data_Audit_1Attribute.dtsx",
								"type": "File",
								"typeProperties": {
									"accessCredential": {
										"domain": "Azure",
										"userName": "sadwfitpoc1",
										"password": {
											"type": "SecureString",
											"value": "**********"
										}
									},
									"configurationPath": "\\\\sadwfitpoc1.file.core.windows.net\\packagedeploymentssis\\BI_DATA_AUDIT\\P5BI.D.CAS.PROFILING.AUDIT\\P5BI.DCASPFLDOETL\\PR_Data_Audit_Open_ETL_RUN_ID.dtsx\\dq_hro_audit.dtsconfig"
								}
							},
							"connectVia": {
								"referenceName": "SSISIR-customtest",
								"type": "IntegrationRuntimeReference"
							},
							"projectConnectionManagers": {},
							"packageConnectionManagers": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-12T10:22:38Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PR_Data_Audit_Close_ETL_RUN_ID')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PR_Data_Audit_Close_ETL_RUN_ID",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "\\\\sadwfitpoc1.file.core.windows.net\\packagedeploymentssis\\sqlserver\\ssis\\development\\BI\\SSIS\\BI_DATA_AUDIT\\PR_Data_Audit_Close_ETL_RUN_ID.dtsx",
								"type": "File",
								"typeProperties": {
									"accessCredential": {
										"domain": "Azure",
										"userName": "sadwfitpoc1",
										"password": {
											"type": "SecureString",
											"value": "**********"
										}
									},
									"configurationPath": "\\\\sadwfitpoc1.file.core.windows.net\\packagedeploymentssis\\sqlserver\\ssis\\development\\BI\\Configuration\\BI_DATA_AUDIT\\DQ_Mobile_EPRSM_Claims_Field_Level_Audit.dtsConfig"
								}
							},
							"connectVia": {
								"referenceName": "SSISIR-customtest",
								"type": "IntegrationRuntimeReference"
							},
							"loggingLevel": "Basic",
							"projectConnectionManagers": {},
							"packageConnectionManagers": {},
							"logLocation": {
								"logPath": "\\\\sadwfitpoc1.file.core.windows.net\\packagedeploymentssis\\sqlserver\\ssis\\development\\BI\\Configuration\\BI_DATA_AUDIT\\P5BI.DEPRSMADDRSTDPSTGAUDIT",
								"type": "File",
								"typeProperties": {
									"accessCredential": {
										"domain": "Azure",
										"userName": "sadwfitpoc1",
										"password": {
											"type": "SecureString",
											"value": "**********"
										}
									}
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-18T05:29:48Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PR_Data_Audit_FieldLevel_4Attributes')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "P5BI_DCLAIMCUBE_FLDTRGAUDIT",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "\\\\sadwfitpoc1.file.core.windows.net\\packagedeploymentssis\\sqlserver\\ssis\\development\\BI\\SSIS\\BI_DATA_AUDIT\\PR_Data_Audit_FieldLevel_4Attributes.dtsx",
								"type": "File",
								"typeProperties": {
									"accessCredential": {
										"domain": "Azure",
										"userName": "sadwfitpoc1",
										"password": {
											"type": "SecureString",
											"value": "**********"
										}
									},
									"configurationPath": "\\\\sadwfitpoc1.file.core.windows.net\\packagedeploymentssis\\sqlserver\\ssis\\development\\BI\\Configuration\\BI_DATA_AUDIT\\DQ_Mobile_EPRSM_Claims_Field_Level_Audit.dtsConfig"
								}
							},
							"connectVia": {
								"referenceName": "SSISIR-customtest",
								"type": "IntegrationRuntimeReference"
							},
							"projectConnectionManagers": {},
							"packageConnectionManagers": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-26T07:34:01Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PR_Data_Audit_Open_ETL_RUN_ID')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "P5BI_DEPRSMFLDETL",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "\\\\sadwfitpoc1.file.core.windows.net\\packagedeploymentssis\\sqlserver\\ssis\\development\\BI\\SSIS\\BI_DATA_AUDIT\\PR_Data_Audit_Open_ETL_RUN_ID.dtsx",
								"type": "File",
								"typeProperties": {
									"accessCredential": {
										"domain": "Azure",
										"userName": "sadwfitpoc1",
										"password": {
											"type": "SecureString",
											"value": "**********"
										}
									},
									"configurationPath": "\\\\sadwfitpoc1.file.core.windows.net\\packagedeploymentssis\\sqlserver\\ssis\\development\\BI\\Configuration\\BI_DATA_AUDIT\\DQ_Claims_Cube.dtsConfig"
								}
							},
							"connectVia": {
								"referenceName": "SSISIR-customtest",
								"type": "IntegrationRuntimeReference"
							},
							"projectConnectionManagers": {},
							"packageConnectionManagers": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-26T07:37:05Z"
			},
			"dependsOn": []
		}
	]
}